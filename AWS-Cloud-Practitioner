Udemy: [NEW] Ultimate AWS Certified Cloud Practitioner CLF-C02 2025

Free account - For 1 year

Cloud computing: Ondemand delivery of computing Services Eg: Computers, Databases, applications and other IT resources
Cloud Deployment models: Private,Public and Hybrid(public + Private (company owned infrastucture))
Types of cloud computing: 
1) IAAS (Infrastructure as a Code)
    -Getting networking, Computers, Data storage space from cloud
2) PAAS (Platform as a service)
    -Deploying our applications on cloud 
3) SAAS (Software as a service)
    -Getting softwares from cloud they are managed by cloud. example version upgrades etc

Region: Is a Location that has one or more availaility Zones.
     -In a Region we have 3 to 6 availaility Zones.
Availability Zones: Is a collection of one or more discrete data centres.
     -They are separated from each other so that are isolated from disaster
Now we can say Region is a collection of cluster of datacentres

*)IAM : Identity Access Management
----------------------------------
Its a global service
Root user is created by default shouldn't be used or shared
Users - people in the organization can be grouped
Group - only contain users not other groups

Users can belong to multiple groups, Users can also be not part of any groups

Policy: Its a json document to provide permissions to Users or groups for aws services 
SC: IAM Policy is assigned to Users or Groups to provide permissions
Eg: admin, IAMReadonlyaccess

IAM Role: will provide permissions to AWS resources to access other resources in aws or to perform tasks in this aws account or other aws accounts.
Eg: Ec2Instance roles, LambdaFunction Roles
SC: Policy provide permissions for users, IAM Role provides permissions to AWS Services/resources to do any task in aws

S3 bucket policy: To allow a s3 bucket to be able to access by public then we will add S3 bucket policy to it.

Number of ways to access AWS
1) AWS Management console : You can access all the resource of AWS here.
2) AWS CLI: Using Access Keys
3) AWS SDK: to access api's in the application code. accessed by AccessK Keys

*)EC2: Elastic Cloud Compute
-Its a computer (linux,Windows,Mac)
-t2.micro is an image with 1VCPU, 1GB RAM, 
-Bootstrapping scripts or Ec2 User Data Scripts - A script used to install softwares, do any tasks at the time of Ec2 creation. This script run only once at the time of creation.
-You can start /Stop/Terminate resources to less the cost
-EBS : Its like Hard Disk (Elastic Block Storage)

Ports:
------
22 - SSH - login to linux machine
21- FTP -Upload files to file share
22 - SFTP (Secure File Transfer Protocol) - Upload files using SSH
80 - HTTP -Access unsecured Websites
443 - HTTPS - access Secured websites
3389 - RDP (Remote Desktop Protocol) -Login to windows instances
1433 - sql port


*)Security Groups: 
-Controls how traffic is allowed into or out of AWS resources
-Acts like Firewall
-They only contain allow rules
-Rules can be referenced by IP or security Group
-Region specific. If you change the region then this security group wont be available there.

AWS services
-------------
*)Ec2: Elastic cloud Computing : like our computers

*)EBS: Elastic block storage : we will attach storage to the Ec2. They are network drives.like D drive storage,E drive storage
- EBS volumes are bound to availability zones. you cannot attach an ebs of us-east to us-west.where Ec2 is in us-east
- We can detatch and attach to another instance very quickly
Snapshot is a copy of an Amazon EBS (Elastic Block Storage) volume.
AMI: Amazon Machine Image
Amazon produces few AMI's : public AMI
we can also create our own AMI and do our own customization of Ec2 instance. own OS, software, configuration, monitoring etc
AWS Market place AMI: Some body created it and sells at market place

*) Ec2 Image Builder: Using this we can create image of Ec2 instance and add softwares to it and we can test it and create 100s of Ec2 instance

*) EFS: Elastic File system
Its Managed Network file system.
Can be mounted to 100's of LINUX instances
Can be in any Avaliability Zones
Limited to only Linux instances

*) Fsx 
3rd party high performace computing

Scalability: Adding resources to the application/system to handle the Load
Types: 
Vertical Scalbilty: Increasing the size of the resource (Example increase the size of database, increase t2.micro to t2.large instance)
 -Scale up : Increase the size
 -Scale down: Decrease the size
Horizontal Scalability: Increasing no of resources ()
 -Scale out: Increase the resources
 -Scale in: Decrease the resources

High Availabilty: Running your application /system in at least 2 availability Zones. 
Our application will be available if one datacentre goes down or at any disaster

*)Load Balancer: distributes loads to ultiple servers equally.
4 types of Load balancer
1) Application Load balancer (Http,HTTPS only) - Layer 7
users -->ALB--> (Application on multiple servers)
2) Network Load balancer (Ultra high performance, allows for TCP ) -Layer 4
users -->NLB--> (Application on multiple servers) -- This is basically used when we need high performance when there is a need of transfer millions of transactions per second in an application
3) Gateway Load balancer - Layer 3
users -->GWLB--> (security security cheeck app) --> (Application on multiple servers)  --This is used where there is aneed for high security
4) Classic Load balancer (Retired in 2023)

SC to create Application Load balancer
Create your Ec2 instances
Create Load balancer -- create a target group and add Ec2 instances to target group while creating Load balancer. Thats it.
You can point DNs to this Load balancer

Auto Scaling Group: We can increase or decrease the instances based on the load
----------------
Create an autoscaling group define minimum and max capacity and attach the load balancer created in previous step. thats it
Scaling strategies:
a) Manual Scaling: Update the min and max capacity manuallyu
b) Dynamic scaling:
    -Simple: when cloud watch alarm is triggered (example CPU>70%) then add 2 instances
    -Target tracking scaling: I want the average ASG CPU to stay at around 40%
    -Scheduled Scaling : Increase capacity to 10- on friday at 5pm

c) Predictive scaling: Uses machine learning and predicts futre a head and increases or decreases the instances

*) S3: Simple Storage Service
USed to store the data(files, backups any data) in the S3 buckets
Buckets are like directories
Buckets are defined at region level

Naming convention of bucket:
• No uppercase, No underscore
• 3-63 characters long
• Not an IP
• Must start with lowercase letter or number
• Must NOT start with the prefix xn--
• Must NOT end with the suffix -s3alias

what ever we are storing they are referreed as objects
Max object size is 5TB
If an object is greater than 5 GB then it should be uploaded as multipart. it should be upload as 1000 parts of 5GB.

S3 bucket policy: To allow a s3 bucket to be able to access by public then we will add S3 bucket policy to it.
We can host static website in S3 and use it with that S3 url as website url

• Buckets vs Objects: global unique name, tied to a region
• S3 security: IAM policy, S3 Bucket Policy (public access), S3 Encryption
• S3 Websites: host a static website on Amazon S3
• S3 Versioning: multiple versions for files, prevent accidental deletes
• S3 Replication: same-region or cross-region, must enable versioning
• S3 Storage Classes: Standard, IA, 1Z-IA, Intelligent, Glacier (Instant, Flexible, Deep)
• Snowball: import data onto S3 through a physical device, edge computing
• Storage Gateway: hybrid solution to extend on-premises storage to S3

Databases & Analytics Summary in AWS
• Relational Databases - OLTP: RDS & Aurora (SQL)
• Differences between Multi-AZ, Read Replicas, Multi-Region
• In-memory Database: ElastiCache
• Key/Value Database: DynamoDB (serverless) & DAX (cache for DynamoDB)
• Warehouse - OLAP: Redshift (SQL)
• Hadoop Cluster: EMR
• Athena: query data on Amazon S3 (serverless & SQL)
• QuickSight: dashboards on your data (serverless)
• DocumentDB: “Aurora for MongoDB” (JSON – NoSQL database)
• Amazon Managed Blockchain: managed Hyperledger Fabric & Ethereum blockchains
• Glue: Managed ETL (Extract Transform Load) and Data Catalog service
• Database Migration: DMS
• Neptune: graph database
• Timestream: time-series database

Docker: is a containerization technology
• Docker is a software development platform to deploy apps
• Apps are packaged in containers that can be run on any OS
• Apps run the same, regardless of where they’re run 
• Any machine
• No compatibility issues
• Predictable behavior
• Less work
• Easier to maintain and deploy
• Works with any language, any OS, any technology
• Scale containers up and down very quickly (seconds

*)ECS 
------
• ECS = Elastic Container Service
• Launch Docker containers on AWS
• You must provision & maintain the infrastructure (the EC2 instances)
• AWS takes care of starting / stopping containers
• Has integrations with the Application Load Balancer

*)Fargate
• Launch Docker containers on AWS
• You do not provision the infrastructure (no EC2 instances to manage) – simpler!
• Serverless offering • AWS just runs containers for you based on the CPU / RAM you need
